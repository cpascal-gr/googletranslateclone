{"version":3,"sources":["config.js","utils.js","client.js","flux.js","app.js","index.js"],"names":["Config","detectLanguageDropdownMenuHTML","detectLanguageHeaderBarHTML","Languages","af","sq","am","ar","hy","az","bn","bg","ca","zh","hr","cs","da","nl","en","et","fil","fi","fr","ka","de","el","gu","he","hi","hu","is","id","it","ja","kn","kk","km","ko","ky","lo","lv","lt","mk","ms","ml","mr","mn","my","ne","no","fa","pl","pt","pa","ro","ru","sr","si","sk","sl","es","sw","sv","ta","te","th","tr","uk","uz","vi","zu","getActiveLanguage","languageArray","index","languageObject","selected","language","getSupportedLanguagesArray","langArray","langtag","push","Utils","isSwitchButtonActive","sourceLanguageArray","targetLanguageArray","activeSourceLang","activeTargetLang","getLanguageTagMap","langTagMapArray","Map","searchLanguges","searchText","newLanguageArray","filter","lang","toLowerCase","startsWith","console","log","getLanguageTagToLanguageMap","TRANSLATE_ENDPOINT","DETECT_ENDPOINT","languageTagMap","loadDetectionFromServer","_callee","response","text","regenerator_default","a","wrap","_context","prev","next","sent","Flux","store","dispatch","createNewDetectionAction","stop","loadTranslationFromServer","_callee2","_context2","createNewTargetTextAction","Client","getTranslation","inputText","inputLang","outputLang","shouldDetectLanguage","data","inputLanguage","get","outputLanguage","fetch","method","body","JSON","stringify","then","getDetection","SELECT_LANGUAGE_ACTION_TYPE","SWITCH_SOURCE_TARGET_ACTION_TYPE","TOGGLE_LANGUAGE_SELECTION_DROPDOWN_ACTION_TYPE","NEW_SOURCE_TEXT_ACTION_TYPE","NEW_TARGET_TEXT_ACTION_TYPE","CLOSE_SELECT_LANGUAGE_DROPDOWN_ACTION_TYPE","NEW_SEARCH_TEXT_ACTION_TYPE","NEW_DETECTION_ACTION_TYPE","INITIAL_SOURCE_LANGUAGES_STATE","createLanguageSelectionObject","INITIAL_TARGET_LANGUAGES_STATE","rootReducer","combineReducers","sourceLanguages","newState","newSourceLanguageArray","newActiveSourceLanguage","state","arguments","length","undefined","action","slice","type","selection","sourceOrTarget","updateActiveLanguageInLanguageSelectionArray","targetLanguages","newTargetLanguageArray","newActiveTargetLanguage","recentLanguages","newRecentLanguageArray","indexOf","concat","pop","sourceText","sourceLanguage","targetLanguage","targetText","selectBoxOpen","inputOrOutput","languages","sourceLanguageDetection","changeActiveLanguageInSourceOrTargetLanguageArray","arrayLangIsDetectLanguage","givenLangIsDetectLanguage","getIndexOfLanguageInLanguageArray","resetLanguageArrayToAllFalses","newActiveLanguage","detectLanguageIsInArray","languageIsDetectLanguage","doesLanguageSelectionArrayContainLanguage","addNewActiveLanguageToSourceOrTargetLanguageArray","isSelected","createStore","createSelectLanguageAction","createSwitchSourceTargetAction","createToggleLanguageSelectionDropdownAction","createNewSourceTextAction","createCloseSelectLanguageDropdownAction","createNewSearchTextAction","App","getState","react_default","createElement","className","app_Header","app_TranslationContainer","app_Background","Component","TranslationContainer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","initialState","displaySelectLanguageDropdown","handleStateUpdate","bind","assertThisInitialized","handleNewInput","subscribe","setState","evt","target","value","translationContainerConditionalCSS","translationHeaderConditionalCSS","conditionalCSSBasedOnSearchText","app_TranslationHeader","conditionalCSS","app_TranslationInputBox","onInput","app_TranslationOutputBox","app_TranslationSelectLanguageDropdownContainer","display","TranslationHeader","_this2","switchButtonActive","handleSwitchClick","handleLanguageSelectionClick","selectedLanguage","activeSourceLanguage","activeTargetLanguage","sourceLang","targetLang","_this3","map","trueLanguage","app_TranslationHeaderOptionButton","onClick","app_FadeBox","app_MenuButton","flipped","app_SwitchButton","active","TranslationSelectLanguageDropdownContainer","_this4","handleClick","newSelection","innerHTML","replace","_this5","conditionalCSSForTopMostContainer","conditionalCSSForRecentLanguages","conditionalCSSForDetectLanguageBox","conditionalCSSForDetectLanguageH5","getConditionalCSSForLanguageListItem","app_SelectLanguageSearchBar","src","alt","conditionalCSSForLanguageListItem","recentLanguageConditionalCSS","includes","app_LanguageListItem","h5conditionalCSS","initialBoldingLength","SelectLanguageSearchBar","_this6","handleInput","placeholder","TranslationInputBox","_this7","conditionalCSSForTranslationInputBox","TranslationOutputBox","_this8","MenuButton","_this9","TranslationHeaderOptionButton","_this10","window","innerWidth","selectCssClass","conditionalCSSIfItsDetectLanguage","LanguageListItem","substr","Background","Header","FadeBox","SwitchButton","ReactDOM","render","app","document","getElementById"],"mappings":"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","file":"static/js/main.c5e4ca33.chunk.js","sourcesContent":["// detectLanguageHeaderBarHTML is the HTML that we use in the translation container header. \n// It includes the unicode string for a non-breaking space. We define this so it can be used consistently\n// across the app, especially in cases of equality checks.\nconst detectLanguageHeaderBarHTML = \"Detect\\u00A0Languages\";\n\n// detectLanguageDropdownMenuHTML is the HTML that we use for Detect language in the select language dropdown \n// menu. We define this so it can be used consistently across the app, especially in cases of equality checks.\nconst detectLanguageDropdownMenuHTML = \"Detect language\"\n\n// Languages holds the tags (e.g \"en\") and human-readable forms (e.g \"English\") of all supported languages.\nconst Languages = {\n            \"af\":\"Afrikaans\",\n            \"sq\":\"Albanian\",\n            \"am\":\"Amharic\",\n            \"ar\":\"Arabic\",\n            \"hy\":\"Armenian\",\n            \"az\":\"Azerbaijani\",\n            \"bn\":\"Bengali\",\n            \"bg\":\"Bulgarian\",\n            \"ca\":\"Catalan\",\n            \"zh\":\"Chinese\",\n            \"hr\":\"Croatian\",\n            \"cs\":\"Czech\",\n            \"da\":\"Danish\",\n            \"nl\":\"Dutch\",\n            \"en\":\"English\",\n            \"et\":\"Estonian\",\n            \"fil\":\"Filipino\",\n            \"fi\":\"Finnish\",\n            \"fr\":\"French\",\n            \"ka\":\"Georgian\",\n            \"de\":\"German\",\n            \"el\":\"Greek\",\n            \"gu\":\"Gujarati\",\n            \"he\":\"Hebrew\",\n            \"hi\":\"Hindi\",\n            \"hu\":\"Hungarian\",\n            \"is\":\"Icelandic\",\n            \"id\":\"Indonesian\",\n            \"it\":\"Italian\",\n            \"ja\":\"Japanese\",\n            \"kn\":\"Kannada\",\n            \"kk\":\"Kazakh\",\n            \"km\":\"Khmer\",\n            \"ko\":\"Korean\",\n            \"ky\":\"Kyrgyz\",\n            \"lo\":\"Lao\",\n            \"lv\":\"Latvian\",\n            \"lt\":\"Lithuanian\",\n            \"mk\":\"Macedonian\",\n            \"ms\":\"Malay\",\n            \"ml\":\"Malayalam\",\n            \"mr\":\"Marathi\",\n            \"mn\":\"Mongolian\",\n            \"my\":\"Myanmar(Burmese)\",\n            \"ne\":\"Nepali\",\n            \"no\":\"Norwegian\",\n            \"fa\":\"Persian\",\n            \"pl\":\"Polish\",\n            \"pt\":\"Portuguese\",\n            \"pa\":\"Punjabi\",\n            \"ro\":\"Romanian\",\n            \"ru\":\"Russian\",\n            \"sr\":\"Serbian\",\n            \"si\":\"Sinhala\",\n            \"sk\":\"Slovak\",\n            \"sl\":\"Slovenian\",\n            \"es\":\"Spanish\",\n            \"sw\":\"Swahili\",\n            \"sv\":\"Swedish\",\n            \"ta\":\"Tamil\",\n            \"te\":\"Telugu\",\n            \"th\":\"Thai\",\n            \"tr\":\"Turkish\",\n            \"uk\":\"Ukrainian\",\n            \"uz\":\"Uzbek\",\n            \"vi\":\"Vietnamese\",\n            \"zu\":\"Zulu\"\n}\n\n// Export it as a ES6 module\nconst Config = {\n    detectLanguageDropdownMenuHTML, \n    detectLanguageHeaderBarHTML, \n    Languages\n}\nexport default Config;","import Config from './config.js'\n\nfunction isSwitchButtonActive(sourceLanguageArray, targetLanguageArray) {\n    let activeSourceLang = getActiveLanguage(sourceLanguageArray)\n    let activeTargetLang = getActiveLanguage(targetLanguageArray)\n    // If the user has selected \"Detect Language\", switchButton is inactive\n    return !(sourceLanguageArray[\"0\"].selected || (activeSourceLang == activeTargetLang)) \n}\n\n/* given a language array from the state tree, return the language that\n   corresponds to the active language\n   ArrayOfLanguageObjects -> str (e.g \"French\")\n*/\nfunction getActiveLanguage(languageArray) {\n    for (var index in languageArray) { \n        var languageObject = languageArray[index]\n        if (languageObject.selected) {\n            return languageObject.language\n        }\n    }\n}\n\n// getSupportedLanguagesArray returns an array of all the supported languages in human-readable\n// format. e.g [\"English\", \"Spanish\", ...]\nfunction getSupportedLanguagesArray() {\n    var langArray = []\n    for (let langtag in Config.Languages) {\n      langArray.push(Config.Languages[langtag])\n    }\n\n    return langArray\n}\n\n// getLanguageTagMap returns a map that translates human-readable formats into language tags\n// for all the supported languages e.g {\"English\" : \"en\", \"Russian\", \"ru\", ...}\nfunction getLanguageTagMap() {\n    var langTagMapArray = []\n    for (let langtag in Config.Languages) {\n      langTagMapArray.push([Config.Languages[langtag], langtag])\n    }\n    var languageTagMap = new Map(langTagMapArray)\n    return languageTagMap\n}\n\n// getLanguageTagToLanguageMap returns a map that translates language tags (e.g \"en\") to human \n// readable language names (e.g \"english\")\nfunction getLanguageTagToLanguageMap() {\n    var langTagMapArray = []\n    for (let langtag in Config.Languages) {\n      langTagMapArray.push([langtag, Config.Languages[langtag]])\n    }\n    var languageTagMap = new Map(langTagMapArray)\n    return languageTagMap\n}\n// searchArray searches over all supported languages (e.g [\"English\", \"French\", \"Spanish\"])\n// and returns a new languageArray that contains the best matches for the given searchText\nfunction searchLanguges(searchText) {\n    let allLanguages = getSupportedLanguagesArray()\n    var newLanguageArray = allLanguages.filter((lang) => {\n        return lang.toLowerCase().startsWith(searchText.toLowerCase())\n    })\n    console.log(\"New language array at end of search array function\", newLanguageArray)\n    return newLanguageArray\n}\n\n// Export as a ES6 module\nconst Utils = {\n    isSwitchButtonActive, \n    getActiveLanguage, \n    getSupportedLanguagesArray,\n    getLanguageTagMap,\n    searchLanguges,\n    getLanguageTagToLanguageMap\n}\nexport default Utils;","import Flux from './flux.js'\nimport Utils from './utils.js'\nimport Config from './config.js'\n\n// API Endpoints\nconst TRANSLATE_ENDPOINT = \"https://gtranslateclone-1557162436236.appspot.com/api/v1/translate\"\nconst DETECT_ENDPOINT = \"https://gtranslateclone-1557162436236.appspot.com/api/v1/detectlanguage\"\n\n// languageTagMap translates human-readable language names into ~2-3 character language tags that are compatable with\n// Google Translate's machine algorthms. This is needed for compatability with the server\n// e.g \"English\" -> \"en\". e.g \"Russian\" -> \"ru\"\nconst languageTagMap = Utils.getLanguageTagMap()\n\n/*  getTranslation makes a request to the server to get the given text translated\n    if shouldDetectLanguage is true, then it asks the server to the detect the language as well\n    str bool -> str */\nfunction getTranslation(inputText, inputLang, outputLang, shouldDetectLanguage) {\n    let data = {\n        \"inputText\" : inputText,\n        \"inputLanguage\" : languageTagMap.get(inputLang), \n        \"outputLanguage\" : languageTagMap.get(outputLang), \n        \"shouldDetectLanguage\" : shouldDetectLanguage\n    }\n\n    // Should add something that checks status\n    return fetch(TRANSLATE_ENDPOINT, {\n      method: 'post',\n      body: JSON.stringify(data),\n    }).then(loadTranslationFromServer);\n  }\n\nfunction getDetection(inputText) {\n    let data = {\n        \"inputText\" : inputText\n    }\n    console.log(\"data sent out in getDetection\", data)\n\n    return fetch(DETECT_ENDPOINT, {\n        method: 'post',\n        body: JSON.stringify(data),\n      }).then(loadDetectionFromServer);\n\n}\n\nasync function loadDetectionFromServer(response) {\n    let text = await response.text()\n    console.log(\"Text in loadDetectionFromServer\", text)\n    Flux.store.dispatch(Flux.createNewDetectionAction(text))\n}\n\nasync function loadTranslationFromServer(response) {\n    let text = await response.text()\n    Flux.store.dispatch(Flux.createNewTargetTextAction(text))\n}\n\n\n// Export as a ES6 module\nconst Client = {\n    getTranslation,\n    getDetection\n}\nexport default Client;","import Client from './client.js';\nimport { createStore, combineReducers } from 'redux';\nimport Config from './config.js'\nimport Utils from './utils.js';\n\n/******* Definitions and Notes ********/\n// --- 1: LanguageSelectionObject\n// A LanguageSelectionObject is a JSON object with two fields: 'language' and 'selected'\n// language: str. selected: bool. \n// It represents a language that is presented as an option for selection to the user\n// e.g {'English', false}\n// --- 2: JSON.parse(JSON.stringify(thing)) is a common pattern we use to deep-copy objects\n// This is because Object.assign() only copies primitives by value. It copies nested objects\n// by reference. \n\n// Action types\nconst SELECT_LANGUAGE_ACTION_TYPE = 'SELECT_LANGUAGE'\nconst SWITCH_SOURCE_TARGET_ACTION_TYPE = 'SWITCH_SOURCE_TARGET'\nconst TOGGLE_LANGUAGE_SELECTION_DROPDOWN_ACTION_TYPE = \"TOGGLE_LANGUAGE_SELECTION_DROPDOWN\"\nconst NEW_SOURCE_TEXT_ACTION_TYPE = \"NEW_SOURCE_TEXT\"\nconst NEW_TARGET_TEXT_ACTION_TYPE = \"NEW_TARGET_TEXT\"\nconst CLOSE_SELECT_LANGUAGE_DROPDOWN_ACTION_TYPE = \"CLOSE_SELECT_LANGUAGE_DROPDOWN\"\nconst NEW_SEARCH_TEXT_ACTION_TYPE = \"NEW_SEARCH_TEXT\"\nconst NEW_DETECTION_ACTION_TYPE = \"NEW_DETECTION\"\n\n/********** ACTION CREATION FUNCTIONS *********/\n// createSelectLanguageAction creates an action of type 'SELECT_LANGUAGE'\n//    str str -> action\n//    inputOrOutput must be one of \"input\" or \"output\"\n//    selection must be a supported language for the given inputOrOutput\nfunction createSelectLanguageAction(sourceOrTarget, selection, sourceText) {\n    // insert checks for validity of inputOrOutput\n    // insert a check to make sure selection is a supported language\n    return {\n        'type' : SELECT_LANGUAGE_ACTION_TYPE, \n        'sourceOrTarget' : sourceOrTarget, \n        'selection' : selection,\n        'sourceText' : sourceText\n    };\n}\n\n// createSwitchInputOutputAction creates an action of type \"SWITCH_INPUT_OUTPUT\"\n// str str -> action\nfunction createSwitchSourceTargetAction(newActiveSourceLanguage, newActiveTargetLanguage) {\n    return {\n        'type' : SWITCH_SOURCE_TARGET_ACTION_TYPE,\n        'newActiveSourceLanguage' : newActiveSourceLanguage,\n        'newActiveTargetLanguage' : newActiveTargetLanguage\n    };\n}\n\n/* createToggleLanguageSelectionDropdownAction creates an action of type \n  'TOGGLE_LANGUAGE_SELECTION_DROPDOWN'\n   str -> action\n   inputOrOutput must be one of \"input\" or \"output\" */\nfunction createToggleLanguageSelectionDropdownAction(inputOrOutput) {\n    // insert checks for validity of inputOrOutput\n    return {\n        'type' : TOGGLE_LANGUAGE_SELECTION_DROPDOWN_ACTION_TYPE,\n        'inputOrOutput' : inputOrOutput\n    };\n}\n\nfunction createNewDetectionAction(text) {\n    return {\n        'type' : NEW_DETECTION_ACTION_TYPE, \n        'text' : text\n    }\n}\n\n// createNewSourceAction creates an action that indicates the user entered new input text\n// str str str -> action\nfunction createNewSourceTextAction(text, sourceLanguage, targetLanguage) {\n    return {\n        'type' : NEW_SOURCE_TEXT_ACTION_TYPE,\n        'text' : text,\n        'sourceLanguage' : sourceLanguage,\n        'targetLanguage' : targetLanguage\n    };\n}\n\n// createNewSearchTextAction creates an action that indicates the user entered new search text\n// str str str -> action\nfunction createNewSearchTextAction(text) {\n    return {\n        'type' : NEW_SEARCH_TEXT_ACTION_TYPE,\n        'text' : text,\n    };\n}\n\n// createNewOutputAction creates an action that indicates the app has received new output text\nfunction createNewTargetTextAction(text) {\n    return {\n        'type' : NEW_TARGET_TEXT_ACTION_TYPE, \n        'text' : text\n    };\n}\n\n// createCloseSelectLanguageDropdownAction cretes an action that signals we want to close the \n// select language dropdown.\nfunction createCloseSelectLanguageDropdownAction() {\n    return {\n        'type' : CLOSE_SELECT_LANGUAGE_DROPDOWN_ACTION_TYPE\n    };\n}\n\n/********* Create the Initial State, Store, and Reducers ************/\nconst INITIAL_SOURCE_LANGUAGES_STATE = [\n        createLanguageSelectionObject(Config.detectLanguageHeaderBarHTML, true),\n        createLanguageSelectionObject('Albanian', false),\n        createLanguageSelectionObject('Spanish', false),\n        createLanguageSelectionObject('English', false)];\nconst INITIAL_TARGET_LANGUAGES_STATE = [\n        createLanguageSelectionObject('Spanish', false),\n        createLanguageSelectionObject('Russian', false),\n        createLanguageSelectionObject('Portugese', true)];\n\nconst rootReducer = combineReducers({\n    'sourceLanguages' : sourceLanguagesReducer,\n    'targetLanguages' : targetLanguagesReducer,\n    'recentLanguages' : recentLanguagesReducer,\n    'sourceText' : sourceTextReducer,\n    'targetText' : targetTextReducer,\n    'selectBoxOpen' : selectBoxOpenReducer,\n    'languages' : languagesReducer,\n    'searchText' : searchTextReducer,\n    'sourceLanguageDetection' : sourceLanguageDetectionReducer\n});\nconst store = createStore(rootReducer);\n\nfunction sourceLanguageDetectionReducer(state=\"\", action) {\n    var newState // str e.g \"en\"\n\n    switch (action.type) {\n        case NEW_SOURCE_TEXT_ACTION_TYPE:\n            newState = state\n            if ((action.sourceLanguage === Config.detectLanguageDropdownMenuHTML) || (action.sourceLanguage === Config.detectLanguageHeaderBarHTML)) {\n                Client.getDetection(action.text)\n            }\n            break;\n        case SELECT_LANGUAGE_ACTION_TYPE:\n            newState = state\n            if ((action.selection === Config.detectLanguageDropdownMenuHTML) || (action.selection === Config.detectLanguageHeaderBarHTML)) {\n                Client.getDetection(action.sourceText)\n            } else if (action.sourceOrTarget == \"source\") {\n                newState = \"\"\n            }\n            break;\n        case NEW_DETECTION_ACTION_TYPE:\n            newState = action.text\n            break;\n        default:\n            newState = state\n    }\n\n    return newState\n}\n// searchTextReducer acts on the searchText property\nfunction searchTextReducer(state=\"\", action) {\n    var newState; // str e.g \"Spa\"\n\n    switch (action.type) {\n        case NEW_SEARCH_TEXT_ACTION_TYPE:\n            newState = action.text\n            break;\n        case TOGGLE_LANGUAGE_SELECTION_DROPDOWN_ACTION_TYPE:\n        case CLOSE_SELECT_LANGUAGE_DROPDOWN_ACTION_TYPE:\n            newState = \"\"\n            break;\n        default:\n            newState = state;\n    }\n\n    return newState\n}\n\n// languagesReducer acts on the langauges property. It's mainly here to respond to searches.\nfunction languagesReducer(state=Utils.getSupportedLanguagesArray(), action) {\n    var newState; // ArrayOfStrings (e.g [\"Spanish\", \"English\" ..., \"Italian\"])\n    var newLanguageArray; // ArrayOfStrings (e.g [\"Spanish\", \"French\"])\n\n    switch (action.type) {\n        case NEW_SEARCH_TEXT_ACTION_TYPE: \n            newLanguageArray = Utils.searchLanguges(action.text)\n            newState = newLanguageArray\n            break;\n        case CLOSE_SELECT_LANGUAGE_DROPDOWN_ACTION_TYPE:\n        case TOGGLE_LANGUAGE_SELECTION_DROPDOWN_ACTION_TYPE:\n            newState = Utils.getSupportedLanguagesArray();\n            break;\n        default:\n            newState = state;\n    }\n\n    return newState\n}\n\n// sourceLanguagesReducer handles all updates to the 'sourceLanguages' property\n// \n// It operates on the following actions:\n// \n// SELECT_LANGUAGE:\n// {\n//     'type' : SELECT_LANGUAGE_ACTION_TYPE, \n//     'sourceOrTarget' : sourceOrTarget, \n//     'selection' : selection\n// }\n// \n// SWITCH_INPUT_OUTPUT:\n// {\n//     'type' : SWITCH_SOURCE_TARGET_ACTION_TYPE,\n//     'newActiveSourceLanguage' : newActiveSourceLanguage,\n//     'newActiveTargetLanguage' : newActiveTargetLanguage\n// }\nfunction sourceLanguagesReducer(state=INITIAL_SOURCE_LANGUAGES_STATE, action) {\n    var newState; // ArrayOfLanguageSelectionObjects \n    var newSourceLanguageArray; // ArrayOfLanguageSelectionObjects\n    var newActiveSourceLanguage; // str e.g \"French\"\n\n    newSourceLanguageArray = state.slice(); // deep copy of source language array\n\n    // Get the new active source language\n    switch (action.type) {\n        case SELECT_LANGUAGE_ACTION_TYPE:\n            newActiveSourceLanguage = action.selection;\n            break;\n        case SWITCH_SOURCE_TARGET_ACTION_TYPE:\n            newActiveSourceLanguage = action.newActiveSourceLanguage;\n            break;\n        default:\n            // do nothing\n    }\n\n    // Implement the reduction\n    switch (action.type) {\n        case SELECT_LANGUAGE_ACTION_TYPE:\n        case SWITCH_SOURCE_TARGET_ACTION_TYPE:\n            // Check if this was a target selection. If so, return state as is. \n            if ((action.sourceOrTarget === \"target\") && (action.type === SELECT_LANGUAGE_ACTION_TYPE)) {\n                newState = state;\n                break;\n            }\n            \n            // Update the active language and create the new state\n            updateActiveLanguageInLanguageSelectionArray(newSourceLanguageArray, newActiveSourceLanguage)\n            newState = newSourceLanguageArray\n            \n            break;\n        default:\n            newState = state;\n    }\n\n    return newState\n}\n\n// targetLanguagesReducer handles all updates to the 'targetLanguages' property\n// \n// It operates on the following actions:\n// \n// SELECT_LANGUAGE:\n// {\n//     'type' : SELECT_LANGUAGE_ACTION_TYPE, \n//     'sourceOrTarget' : sourceOrTarget, \n//     'selection' : selection\n// }\n// \n// SWITCH_INPUT_OUTPUT:\n// {\n//     'type' : SWITCH_SOURCE_TARGET_ACTION_TYPE,\n//     'newActiveSourceLanguage' : newActiveSourceLanguage,\n//     'newActiveTargetLanguage' : newActiveTargetLanguage\n// }\nfunction targetLanguagesReducer(state=INITIAL_TARGET_LANGUAGES_STATE, action) {\n    var newState; // ArrayOfLanguageSelectionObjects \n    var newTargetLanguageArray; // ArrayOfLanguageSelectionObjects\n    var newActiveTargetLanguage; // str e.g \"French\"\n\n    newTargetLanguageArray = state.slice(); // deep copy of target language array\n\n    // Get the new active source language\n    switch (action.type) {\n        case SELECT_LANGUAGE_ACTION_TYPE:\n            newActiveTargetLanguage = action.selection;\n            break;\n        case SWITCH_SOURCE_TARGET_ACTION_TYPE:\n            newActiveTargetLanguage = action.newActiveTargetLanguage;\n            break;\n        default:\n            // do nothing\n    }\n\n    // Implement the reduction\n    switch (action.type) {\n        case SELECT_LANGUAGE_ACTION_TYPE:\n        case SWITCH_SOURCE_TARGET_ACTION_TYPE:\n            // Check if this was a source selection. If so, return state as is. \n            if ((action.sourceOrTarget === \"source\") && (action.type === SELECT_LANGUAGE_ACTION_TYPE)) {\n                newState = state;\n                break;\n            }\n            \n            // Update the active language and create the new state\n            updateActiveLanguageInLanguageSelectionArray(newTargetLanguageArray, newActiveTargetLanguage)\n            newState = newTargetLanguageArray\n\n            break;\n        default:\n            newState = state;\n    }\n\n    return newState\n}\n\n// recentLanguagesReducer handles all updates to the 'recentLanguages' property\nfunction recentLanguagesReducer(state=[], action) {\n    var newRecentLanguageArray = state.slice() // ArrayOfStrings e.g ['english', 'Russian', 'Spanish']\n    switch (action.type) {\n        // If the user selects a new language, update the recent languages array\n        case SELECT_LANGUAGE_ACTION_TYPE:\n            if  ((action.selection === Config.detectLanguageDropdownMenuHTML) || (action.selection === Config.detectLanguageHeaderBarHTML)) {\n                // If they selected \"Detect Language\", make no change\n            } else if (newRecentLanguageArray.indexOf(action.selection) >= 0) {\n\n                // If the language is already in recentLanguages, move it to the top of the stack\n                newRecentLanguageArray = newRecentLanguageArray.filter((lang) => {\n                    return lang !== action.selection\n                })\n                newRecentLanguageArray = [action.selection].concat(newRecentLanguageArray)\n            } else if (state.length === 0) {\n\n                // If there are not yet any recent languages, create a length 1 recent languages array\n                newRecentLanguageArray = [action.selection]\n            } else if (state.length < 5) {\n\n                // If the recent language array is less than 5 items long, add the selection to the end of the array\n                newRecentLanguageArray.push(action.selection)  \n            } else {\n\n                // TODO: assert that its equal to 5\n\n                // If we have a full recentLanguages stack, then pop off the end and add the new one at the beginning\n                newRecentLanguageArray.pop()\n                newRecentLanguageArray = [action.selection].concat(newRecentLanguageArray)\n            }\n            break;\n        default:\n            // Do nothing\n    }\n\n    return newRecentLanguageArray\n}\n\n// sourceTextReducer handles all updates to the 'sourceText' property\nfunction sourceTextReducer(state=\"\", action) {\n    var newState // JSON Object\n\n    switch (action.type) {\n        case NEW_SOURCE_TEXT_ACTION_TYPE:\n            // Initiate the translation process\n            if (action.sourceLanguage === Config.detectLanguageHeaderBarHTML) {\n                Client.getTranslation(action.text, \"\", action.targetLanguage, true);\n            } else {\n                Client.getTranslation(action.text, action.sourceLanguage, action.targetLanguage, false);\n            }\n\n            // Update the state\n            newState =  action.text;\n\n            break;\n        default:\n            newState = state;\n    }\n\n    return newState;\n}\n\n// targetTextReducer handles all updates to the 'targetText' property\nfunction targetTextReducer(state=\"\", action) {\n    var newState // JSON Object\n\n    switch (action.type) {\n        case NEW_TARGET_TEXT_ACTION_TYPE:\n            newState = action.text\n            break;\n        case SELECT_LANGUAGE_ACTION_TYPE:\n        default:\n            newState = state;\n    }\n\n    return newState\n}\n\n// selectBoxOpenReducer handles all updates to the 'selectBoxOpen' property\nfunction selectBoxOpenReducer(state=\"\", action) {\n    var newState; // JSON Object e.g {'selectBoxOpen' : \"source\"}\n\n    switch (action.type) {\n        case TOGGLE_LANGUAGE_SELECTION_DROPDOWN_ACTION_TYPE:\n            newState = ((state === \"\") ? action.inputOrOutput : \"\");\n            break;\n        case CLOSE_SELECT_LANGUAGE_DROPDOWN_ACTION_TYPE:\n            newState = \"\";\n            break;\n        case SWITCH_SOURCE_TARGET_ACTION_TYPE:\n            newState = ((state !== \"\") ? \"\" : state)\n            break;\n        default:\n            newState = state;\n    }\n\n    return newState;\n}\n\n\n/********* HELPER FUNCTIONS *********/\n// doesLanguageSelectionArrayContainLanguage checks if the given languageSelectionArray contains\n// the given language. It does not modify the original array\n// ArrayOfLanguageSelectionObjects str -> bool\n// e.g [{'language': Russian', 'selected': true}, {'language': 'English', 'selected': false}] 'french' -> false\n// It handles the \"Detect Language\" case specifically, considering any of the multiple ways Detect Language is\n// written to be equal (see Config for more on detect language specifications)\nfunction doesLanguageSelectionArrayContainLanguage(languageArray, language) {\n    for (var index in languageArray) {\n        // Handle ordinary case\n        if (languageArray[index].language === language) {\n            return true;\n        }\n\n        // Handle the Detect Language case\n        let detectLanguageIsInArray = (languageArray[index].language === Config.detectLanguageHeaderBarHTML);\n        let languageIsDetectLanguage = (language === Config.detectLanguageHeaderBarHTML || language === Config.detectLanguageDropdownMenuHTML);\n        if (detectLanguageIsInArray && languageIsDetectLanguage) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n// changeActiveLanguageInSourceOrTargetLanguageArray modifies the original array such that the given \n// language is selected and all others are not\n// ArrayOfLanguageSelectionObjects str -> None\n// e.g [{'language': Russian', 'selected': true}, {'language': 'English', 'selected': false}] 'french' -> None\n// It handles the \"Detect Language\" case as well, since getIndexOfLanguageInLanguageArray handles Detect Language\nfunction changeActiveLanguageInSourceOrTargetLanguageArray(languageArray, language) {\n    var index = getIndexOfLanguageInLanguageArray(languageArray, language);\n    resetLanguageArrayToAllFalses(languageArray);\n    languageArray[index].selected = true;\n}\n\n// addNewActiveLanguageToSourceOrTargetLanguageArray modifies the original array such that the given \n// language is in the \"first\" position and the other languages are moved along accordingly. \n// If the given languageArray is a sourceLanguagesArray, then \"first\" is actually \"second\", since \"Detect Languages\"\n// never movies. \n// ArrayOfLanguageSelectionObjects str -> None\n// e.g [{'language': Russian', 'selected': true}, {'language': 'English', 'selected': false}] 'french' -> None\nfunction addNewActiveLanguageToSourceOrTargetLanguageArray(languageArray, language) {\n    resetLanguageArrayToAllFalses(languageArray)\n    if (languageArray[0].language === Config.detectLanguageHeaderBarHTML) {\n        languageArray[\"3\"] = languageArray[\"2\"];\n        languageArray[\"2\"] = languageArray[\"1\"];\n        languageArray[\"1\"] = createLanguageSelectionObject(language, true);\n    } else {\n        languageArray[\"2\"] = languageArray[\"1\"];\n        languageArray[\"1\"] = languageArray[\"0\"];\n        languageArray[\"0\"] = createLanguageSelectionObject(language, true);\n    }\n}\n\n// getIndexOfLanguageInLanguageArray gets the index of the given language in the given \n// language array. It does not modify the original array.\n// ArrayOfLanguageSelectionObjects str -> int\n// e.g [{'language': Russian', 'selected': true}, {'language': 'English', 'selected': false}] 'English' -> 1\n// It handles the \"Detect Language\" case specifically, considering any of the multiple ways Detect Language is\n// written to be equal (see Config for more on detect language specifications)\n// It assumes the language is in the array. If it is not, it throws an error\nfunction getIndexOfLanguageInLanguageArray(languageArray, language) {\n    // TODO: Check that it's in there. If it's not, throw an error\n\n    for (var index in languageArray) {\n        // Handle normal case\n        if (languageArray[index].language === language) {\n            return index;\n        }\n\n        // Handle the Detect Language case\n        let arrayLangIsDetectLanguage = (languageArray[index].language === Config.detectLanguageHeaderBarHTML);\n        let givenLangIsDetectLanguage = (language === Config.detectLanguageHeaderBarHTML || language === Config.detectLanguageDropdownMenuHTML);\n        if (arrayLangIsDetectLanguage && givenLangIsDetectLanguage) {\n            // TODO: Check that index is 0. If not, throw an error\n            return index;\n        }\n    }\n\n    return -1 // TODO: Shoudln't ever get here. Put in error handling to make sure\n}\n\n// updateActiveLanguageInLanguageSelectionArray updates the active language in a language selection array. \n// It modifies the original array. \n// // ArrayOfLanguageSelectionObjects str -> None\n// e.g [{'language': Russian', 'selected': true}, {'language': 'English', 'selected': false}] 'English' -> None\nfunction updateActiveLanguageInLanguageSelectionArray(languageArray, newActiveLanguage) {\n    if (doesLanguageSelectionArrayContainLanguage(languageArray, newActiveLanguage)) {\n        // If the newActiveLanguage is in the current Languages array, then mark its \"selected\" \n        // property true and mark the \"selected\" property of all other languages false\n        changeActiveLanguageInSourceOrTargetLanguageArray(languageArray, newActiveLanguage)\n    } else {\n        // If the newActiveSourceLanguage is NOT in the current languages array, then make it the \n        // second item (we don't remove \"Detect Language\" and bump up the other languages accordingly)\n        addNewActiveLanguageToSourceOrTargetLanguageArray(languageArray, newActiveLanguage)\n    }\n}\n// resetLanguageArrayToAllFalses sets the value of \"selected\" to value in every object in the \n// given languageArray\nfunction resetLanguageArrayToAllFalses(languageArray) {\n    for (var index in languageArray) {\n        languageArray[index].selected = false;\n    }\n}\n\n// createLanguageSelectionObject creates a LanguageSelectionObject\n// str bool -> LanguageSelectionObject\nfunction createLanguageSelectionObject(language, isSelected) {\n    return {\n        'language' : language,\n        'selected' : isSelected\n    }\n}\n\n\n\nconst Flux = {\n    store,\n    createSelectLanguageAction,\n    createSwitchSourceTargetAction,\n    createToggleLanguageSelectionDropdownAction,\n    createNewSourceTextAction,\n    createNewTargetTextAction,\n    createCloseSelectLanguageDropdownAction,\n    createNewSearchTextAction,\n    createNewDetectionAction\n}\n\nexport default Flux;\n","import React, { Component } from 'react';\nimport './app-720minus.css'\nimport './app-720plus.css'\n// import './app2.css'\n\nimport Flux from './flux.js';\nimport Utils from './utils.js';\nimport Config from './config.js';\nimport Client from './client.js';\n\n/* Define the view */\nclass App extends Component {\n  \trender() {\n        console.log(Flux.store.getState());\n\t\treturn (\n\t  \t\t<div className=\"page\">\n\t  \t\t\t<Header />\n\t  \t\t\t<TranslationContainer />\n\t  \t\t\t<Background />\n\t  \t\t</div>\n\t\t);\n  \t}\n}\n\n// Holds all the components of the Translation Module\nclass TranslationContainer extends Component {\n\tconstructor(props) {\n        super(props);\n        \n        // Set up initial state\n\t\tlet initialState = Flux.store.getState();\n\t\tthis.state = {\n            'displaySelectLanguageDropdown': initialState.selectBoxOpen,\n            'sourceLanguages' : initialState.sourceLanguages, \n            'targetLanguages' : initialState.targetLanguages,\n            'selectBoxOpen' : initialState.selectBoxOpen,\n            'searchText' : initialState.searchText};\n\n        // Bind methods to this\n        this.handleStateUpdate = this.handleStateUpdate.bind(this);\n        this.handleNewInput = this.handleNewInput.bind(this);\n\t}\n\n\tcomponentDidMount() {\n\t\tFlux.store.subscribe(this.handleStateUpdate);\n\t}\n\n\thandleStateUpdate() {\n        \n\t\tthis.setState((state, props) => {\n            let newState = Flux.store.getState();\n            console.log(\"Current state\", newState)\n            return {'displaySelectLanguageDropdown' : newState.selectBoxOpen,\n                    'sourceLanguages' : newState.sourceLanguages, \n                    'targetLanguages' : newState.targetLanguages,\n                    'selectBoxOpen' : newState.selectBoxOpen,\n                    'searchText' : newState.searchText};\n            \n        })\n        \n    }\n    \n    handleNewInput(evt) {\n        Flux.store.dispatch(Flux.createNewSourceTextAction(\n                                evt.target.value, \n                                Utils.getActiveLanguage(this.state.sourceLanguages), \n                                Utils.getActiveLanguage(this.state.targetLanguages)));\n    }\n\n\trender() {\n        // If the language selection dropdown menu is open, kill the box shadow on the translation container. \n        // Since the language selection dropdown menu has its own box shadow, it gets to be too much. To make up for\n        // the lost box-shadow over the header, add a box shadow there\n        let translationContainerConditionalCSS = ((this.state.selectBoxOpen !== \"\") ? \"killBoxShadow\" : \"\")\n        let translationHeaderConditionalCSS = ((this.state.selectBoxOpen !== \"\") ? \"addTranslationHeaderBoxShadow\" : \"\")\n        let conditionalCSSBasedOnSearchText = ((this.state.searchText !== \"\") ? \"translationHeaderDontDisplayAsFunctionOfSearchText\" : \"\")\n\t\treturn (\n\t\t\t<div className={\"translationContainer \" + translationContainerConditionalCSS}>\n\t\t\t\t<TranslationHeader conditionalCSS={translationHeaderConditionalCSS + \" \" + conditionalCSSBasedOnSearchText}/>\n\t\t\t\t<TranslationInputBox onInput={this.handleNewInput}/>\n\t\t\t\t<TranslationOutputBox />\n\t\t\t\t<TranslationSelectLanguageDropdownContainer display={this.state.displaySelectLanguageDropdown}/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n// TranslationHeader is the header bar above the main translation widget. \nclass TranslationHeader extends Component {\n\tconstructor(props) {\n        super(props);\n        \n        // Set initial State\n    \tlet initialState = Flux.store.getState();\n    \tthis.state =  {'sourceLanguages': initialState.sourceLanguages,\n                        'targetLanguages' : initialState.targetLanguages,\n                        'selectBoxOpen' : initialState.selectBoxOpen,\n                        \"sourceText\" : initialState.sourceText,\n                        \"sourceLanguageDetection\" : initialState.sourceLanguageDetection,\n                        \"languageTagMap\" : Utils.getLanguageTagToLanguageMap(),\n    \t\t\t\t\t'switchButtonActive' : Utils.isSwitchButtonActive(\n    \t\t\t\t\t\t\tinitialState.sourceLanguages, \n    \t\t\t\t\t\t\tinitialState.targetLanguages)};\n\n    \t// Bind methods to this\n        this.handleStateUpdate = this.handleStateUpdate.bind(this);\n        this.handleSwitchClick = this.handleSwitchClick.bind(this);\n        this.handleLanguageSelectionClick = this.handleLanguageSelectionClick.bind(this);\n\n        console.log(\"Language tag map in TranslationHeader: \", this.state.languageTagMap)\n  \t}\n\n\tcomponentDidMount() {\n\t\tFlux.store.subscribe(this.handleStateUpdate);\n\t}\n\n\thandleStateUpdate() {\n        let newState = Flux.store.getState();\n\t\tthis.setState((state, props) => {\n            return {'sourceLanguages': newState.sourceLanguages,\n                    'targetLanguages' : newState.targetLanguages, \n                    'selectBoxOpen' : newState.selectBoxOpen,\n                    \"sourceText\" : newState.sourceText,\n                    \"sourceLanguageDetection\" : newState.sourceLanguageDetection,\n                    'switchButtonActive' : Utils.isSwitchButtonActive(\n                            newState.sourceLanguages, \n                            newState.targetLanguages)}}); \n\t}\n\n    handleSwitchClick() {\n        if (this.state.switchButtonActive) {\n            Flux.store.dispatch(Flux.createSwitchSourceTargetAction(\n                Utils.getActiveLanguage(this.state.targetLanguages),\n                Utils.getActiveLanguage(this.state.sourceLanguages)));\n        }\n    }\n\n    // str str -> None\n    // sourceOrTarget: one of \"source\" or \"target\"\n    // selected language: e.g \"French\"\n    handleLanguageSelectionClick(sourceOrTarget, selectedLanguage) {\n        let activeSourceLanguage = Utils.getActiveLanguage(this.state.sourceLanguages);\n        let activeTargetLanguage = Utils.getActiveLanguage(this.state.targetLanguages)\n\n        // If the user selects a new source language that matches the current active target language, \n        // or the user selects a new target language that maches the current active source language, \n        // do a swap\n        if ((sourceOrTarget === \"source\") && (selectedLanguage === activeTargetLanguage) && (activeSourceLanguage !== Config.detectLanguageHeaderBarHTML)) {\n            Flux.store.dispatch(Flux.createSwitchSourceTargetAction(activeTargetLanguage, activeSourceLanguage));\n        } else if ((sourceOrTarget === \"target\") && (selectedLanguage === activeSourceLanguage)) {\n            Flux.store.dispatch(Flux.createSwitchSourceTargetAction(activeTargetLanguage, activeSourceLanguage));\n        } else {\n            Flux.store.dispatch(Flux.createSelectLanguageAction(sourceOrTarget, selectedLanguage, this.state.sourceText));\n        }\n\n        // If there is a translation open and the user selected a new target language, refresh the translation\n        if ((this.state.sourceText !== \"\") && (sourceOrTarget === \"target\")) {\n            let sourceLang = Utils.getActiveLanguage(this.state.sourceLanguages);\n            let targetLang = Utils.getActiveLanguage(this.state.targetLanguages);\n            if (sourceLang === Config.detectLanguageHeaderBarHTML) {\n                Client.getTranslation(this.state.sourceText, sourceLang, targetLang, true);\n            } else {\n                Client.getTranslation(this.state.sourceText, sourceLang, targetLang, false);\n            }\n        }\n\n        // If the select box was open, then close it\n        if (this.state.selectBoxOpen !== \"\") {\n            Flux.store.dispatch(Flux.createCloseSelectLanguageDropdownAction());\n        }\n    }\n    \n\n\trender() {\n\t\treturn (\n\t\t\t<div className={\"translationHeader \" + this.props.conditionalCSS}>\n\t\t\t\t<div className=\"translationHeader--input\">\n\t\t\t\t\t<div className=\"translationHeader--input--languages\">\n                        {this.state.sourceLanguages.map((value) => {\n                            let trueLanguage = value.language\n                            if (value.language === Config.detectLanguageHeaderBarHTML) {\n                                if ((this.state.sourceLanguageDetection !== \"\") && (this.state.sourceLanguageDetection !== \"und\")) {\n                                    trueLanguage = this.state.languageTagMap.get(this.state.sourceLanguageDetection) + \"\\u00A0-\\u00A0Detected\"\n                                }\n                            }\n                            return \t<TranslationHeaderOptionButton \n\t\t\t\t\t\t\t            selected={value.selected} \n\t\t\t\t\t\t\t            text={trueLanguage} \n\t\t\t\t\t\t\t            sourceOrTarget=\"source\"\n                                        onClick={this.handleLanguageSelectionClick}/> \n                        })}\n\t\t\t\t\t\t<FadeBox />\n\t\t\t\t\t</div>\n\t\t\t\t\t<MenuButton flipped={(this.state.selectBoxOpen !== \"\")} sourceOrTarget=\"source\"/>\n\t\t\t\t</div>\n\t\t\t\t<SwitchButton active={this.state.switchButtonActive} onClick={this.handleSwitchClick}/>\n\t\t\t\t<div className=\"translationHeader--output\">\n\t\t\t\t\t<div className=\"translationHeader--output--languages\">\n                        {this.state.targetLanguages.map((value) => {\n                            return <TranslationHeaderOptionButton\n                                        selected={value.selected} \n                                        text={value.language}\n                                        sourceOrTarget=\"target\"\n                                        onClick={this.handleLanguageSelectionClick} /> \n                        })}\n\t\t\t\t\t\t<FadeBox />\n\t\t\t\t\t</div>\n\t\t\t\t\t<MenuButton flipped={(this.state.selectBoxOpen !== \"\")} sourceOrTarget=\"target\"/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n// TranslationSelectLanguageDropDownContainer renders the language selection container \n// that drops down to show additional supported languages.\n// TODO: Simplify this. It's so complicated!\nclass TranslationSelectLanguageDropdownContainer extends Component {\n\tconstructor(props) {\n        super(props);\n        \n        // Set up initial state\n\t\tlet initialState = Flux.store.getState();\n\t\tthis.state = {\n\t\t\t'sourceLanguages' : initialState.sourceLanguages, \n\t\t\t'targetLanguages' : initialState.targetLanguages,\n            'recentLanguages' : initialState.recentLanguages,\n            'languages' : initialState.languages,\n            'selectBoxOpen' : initialState.selectBoxOpen,\n            'searchText' : initialState.searchText,\n            'sourceText' : initialState.sourceText\n        };\n        \n        // Bind methods to 'this'\n\t\tthis.handleStateUpdate = this.handleStateUpdate.bind(this)\n\t\tthis.handleClick = this.handleClick.bind(this)\n\t}\n\n\tcomponentDidMount() {\n\t\tFlux.store.subscribe(this.handleStateUpdate);\n\t}\n\n\thandleStateUpdate() {\n\t\tlet newState = Flux.store.getState();\n\t\tthis.setState((state, props) => {\n\t\t\treturn {\n\t\t\t\t'sourceLanguages' : newState.sourceLanguages, \n\t\t\t\t'targetLanguages' : newState.targetLanguages,\n                'recentLanguages' : newState.recentLanguages,\n                'languages' : newState.languages,\n                'selectBoxOpen' : newState.selectBoxOpen,\n                'searchText' : newState.searchText,\n                'sourceText' : newState.sourceText\n\t\t\t};\n\t\t});\n\t}\n\n\thandleClick(evt) {\n        // Was it a selection for source or target?\n\t\tlet sourceOrTarget = \"source\";\n\t\tif (this.state.selectBoxOpen === \"target\") {\n\t\t\tsourceOrTarget = \"target\";\n\t\t}\n\t\tif (this.state.selectBoxOpen === \"\") {\n\t\t\t// throw error. This shouldn't happen\n        }\n        let newSelection = evt.target.innerHTML.replace(\"<b>\", \"\").replace(\"</b>\", \"\")\n            \n        // select the language and close the dropdown\n        Flux.store.dispatch(Flux.createSelectLanguageAction(sourceOrTarget, newSelection, this.state.sourceText));\n        Flux.store.dispatch(Flux.createCloseSelectLanguageDropdownAction());\n\n        // Send off new source text, since changing the language is practically changing source text\n        if (sourceOrTarget === \"source\") {\n            Flux.store.dispatch(Flux.createNewSourceTextAction(this.state.sourceText, newSelection, Utils.getActiveLanguage(this.state.targetLanguages)))\n        } else if (sourceOrTarget === \"target\") {\n            Flux.store.dispatch(Flux.createNewSourceTextAction(this.state.sourceText, Utils.getActiveLanguage(this.state.sourceLanguages), newSelection))\n        } else {\n            // TODO: throw error. Shouldn't happen\n        }\n        \n\t}\n\n\trender() {\n\t\t// Prepare information about languages\n\t\tvar activeSourceLanguage = Utils.getActiveLanguage(this.state.sourceLanguages);\n\t\tvar activeTargetLanguage = Utils.getActiveLanguage(this.state.targetLanguages);\n\n\t\t// Prepare conditional CSS clases\n\t\tlet conditionalCSSForTopMostContainer = ((this.props.display === \"\") ? \"dontDisplay\" : \"\");\n\t\tlet conditionalCSSForRecentLanguages = ((this.state.recentLanguages.length === 0) ? \"dontDisplay\" : \"\");\n\t\tlet conditionalCSSForDetectLanguageBox = ((this.props.display === \"source\") ? \"\" : \"dontDisplay\");\n        let conditionalCSSForDetectLanguageH5 = getConditionalCSSForLanguageListItem(activeSourceLanguage, activeTargetLanguage, this.props.display, Config.detectLanguageDropdownMenuHTML);\n        let conditionalCSSBasedOnSearchText = ((this.state.searchText !== \"\") ? \"dontDisplay\" : \":\")\n\n\t\treturn(\n\t\t\t<div className={\"TranslationSelectLanguageDropdownContainer \" + conditionalCSSForTopMostContainer}>\n\t\t\t\t<SelectLanguageSearchBar/>\n\t\t\t\t<div className={\"DetectLanguagesBox \" + conditionalCSSForDetectLanguageBox + \"\" + conditionalCSSBasedOnSearchText}>\n\t\t\t\t\t<h5 onClick={this.handleClick} className={conditionalCSSForDetectLanguageH5}>Detect language</h5>\n                    <img src=\"https://ssl.gstatic.com/images/icons/material/system/1x/auto_awesome_grey600_24dp.png\"\n                         alt=\"Sparkle icon\" />\n\t\t\t\t</div>\n\t\t\t\t<div className={\"RecentLanguages \" + conditionalCSSForRecentLanguages + \" \" + conditionalCSSBasedOnSearchText}>\n\t\t\t\t\t<h4 className={conditionalCSSBasedOnSearchText}>Recent languages</h4>\n\t\t\t\t\t<div className={\"LanguageList \" +conditionalCSSForRecentLanguages}>\n\t\t\t\t\t\t{this.state.recentLanguages.map((value) => {\n                            let conditionalCSSForLanguageListItem = getConditionalCSSForLanguageListItem(activeSourceLanguage, activeTargetLanguage, this.props.display, value)\n                            let recentLanguageConditionalCSS = ((this.state.recentLanguages.includes(value)) ? \"recentLanguage\" : \"\")\n                            return <LanguageListItem \n                                        h5conditionalCSS={conditionalCSSForLanguageListItem + \" \" + recentLanguageConditionalCSS} \n                                        onClick={this.handleClick} \n                                        initialBoldingLength={this.state.searchText.length}\n                                        value={value}/>\n\t\t\t\t\t\t})}\n\t\t\t\t\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"AllLanguages\">\n\t\t\t\t\t<h4 className={conditionalCSSBasedOnSearchText}>All languages</h4>\n\t\t\t\t\t<div className=\"LanguageList\">\n\t\t\t\t\t\t{(this.props.display === \"source\" && this.state.languages.length === 67) ? <LanguageListItem \n                                                                h5conditionalCSS={\"detectLanguageItem \" + \n                                                                    getConditionalCSSForLanguageListItem(\n                                                                        activeSourceLanguage, \n                                                                        activeTargetLanguage, \n                                                                        this.props.display, \n                                                                        Config.detectLanguageDropdownMenuHTML)}\n                                                                onClick={this.handleClick}\n                                                                initialBoldingLength={this.state.searchText.length}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={Config.detectLanguageDropdownMenuHTML}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/> : <div/>}\n\t\t\t\t\t\t{this.state.languages.map((value) => {\n                            let conditionalCSSForLanguageListItem = getConditionalCSSForLanguageListItem(activeSourceLanguage, activeTargetLanguage, this.props.display, value)\n                            let recentLanguageConditionalCSS = ((this.state.recentLanguages.includes(value)) ? \"recentLanguage\" : \"\")\n\t\t\t\t\t\t\treturn <LanguageListItem \n\t\t\t\t\t\t\t\t\t\th5conditionalCSS={conditionalCSSForLanguageListItem + \" \" + recentLanguageConditionalCSS}\n                                        onClick={this.handleClick}\n                                        initialBoldingLength={this.state.searchText.length}\n\t\t\t\t\t\t\t\t\t\tvalue={value}\n\t\t\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nclass SelectLanguageSearchBar extends Component {\n    constructor(props) {\n        super(props);\n\n        // Set initialState\n        let initialState = Flux.store.getState()\n        this.state = {\n            'searchText' : initialState.searchText\n        }\n\n        // Bind methods to this\n        this.handleStateUpdate = this.handleStateUpdate.bind(this)\n    }\n\n    componentDidMount() {\n        Flux.store.subscribe(this.handleStateUpdate)\n    }\n\n\thandleClick() {\n\t\tFlux.store.dispatch(Flux.createCloseSelectLanguageDropdownAction());\n\t}\n\n    handleInput(evt) {\n        Flux.store.dispatch(Flux.createNewSearchTextAction(evt.target.value));\n    }\n\n    handleStateUpdate() {\n        let newState = Flux.store.getState();\n        console.log(\"Value of newState in handleStateUpdate in searchbar\", newState);\n        this.setState((state, props) => {\n            return { 'searchText' : newState.searchText }});\n    }\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"SelectLanguageSearchBar\">\n\t\t\t\t<div onClick={this.handleClick} className=\"backButton\"></div>\n                <input type=\"text\" onInput={this.handleInput} \n                       placeholder=\"Search languages\" className=\"languageSearchBar\"\n                       value={(this.state.searchText !== \"\") ? this.state.searchText : \"\"} ></input>\n\t\t\t</div>\n\t\t);\n\t}\n\n}\n\t\t\t\t\nclass TranslationInputBox extends Component {\n\tconstructor(props) {\n        super(props);\n        \n        // Set up initial state\n\t\tlet initialState = Flux.store.getState();\n        this.state = {'sourceText' : initialState.sourceText, 'selectBoxOpen' : initialState.selectBoxOpen};\n        \n        // Bind methods to 'this'\n\t\tthis.handleStateUpdate = this.handleStateUpdate.bind(this)\n\t}\n\n\tcomponentDidMount() {\n\t\tFlux.store.subscribe(this.handleStateUpdate);\n\t}\n\n\thandleStateUpdate() {\n\t\tlet newState = Flux.store.getState();\n\t\tthis.setState((state, props) => {\n\t\t\treturn {'sourceText' : newState.sourceText, 'selectBoxOpen' : newState.selectBoxOpen};\n\t\t})\n\t}\n\n\trender() {\n        let conditionalCSSForTranslationInputBox = ((this.state.selectBoxOpen !== \"\") ? \"dontDisplay\" : \"\")\n\t\treturn (\n\t\t\t<div className={\"translationInputBox \" +conditionalCSSForTranslationInputBox}>\n\t\t\t\t<form className='translationInputTextArea'> \n\t\t\t\t\t<textarea \n\t\t\t\t\t\tonInput={this.props.onInput} \n\t\t\t\t\t\tvalue={this.state.sourceText}\n\t\t\t\t\t>\n\t\t\t\t\t</textarea>\n\t\t\t\t</form>\n\n\t\t\t</div>\n\t\t);\n\t}\n}\nclass TranslationOutputBox extends Component {\n\tconstructor(props) {\n        super(props);\n        \n        // Set up initial state\n\t\tlet initialState = Flux.store.getState();\n        this.state = {'targetText' : initialState.targetText};\n        \n        // Bind methods to 'this'\n\t\tthis.handleStateUpdate = this.handleStateUpdate.bind(this)\n\t}\n\n\tcomponentDidMount() {\n\t\tFlux.store.subscribe(this.handleStateUpdate);\n\t}\n\n\thandleStateUpdate() {\n\t\tlet newState = Flux.store.getState();\n\t\tthis.setState((state, props) => {\n\t\t\treturn {'targetText' : newState.targetText};\n\t\t})\n\t}\n\n\trender() {\n\t\tlet conditionalCSS = (this.state.targetText === \"\" ? \"translationOutputBox--empty\" : \"translationOutputBox--filled\");\n\t\treturn (\n\t\t\t<div className={conditionalCSS}>\n                <h1 className={(this.state.targetText === \"\" ? \"emptyTranslateBox\" : \"\")}>\n                    {(this.state.targetText === \"\" ? \"Translation\" : this.state.targetText)}\n                </h1>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nclass MenuButton extends Component {\n\tconstructor(props) {\n        super(props);\n        \n        // Bind methods to 'this'\n\t\tthis.handleClick = this.handleClick.bind(this);\n\t}\n\n\thandleClick(evt) {\n\t\tFlux.store.dispatch(Flux.createToggleLanguageSelectionDropdownAction(this.props.sourceOrTarget));\n\t}\n\n\trender() {\n        let conditionalCSS = (this.props.flipped ? \"menuButton--flipped\" : \"\")\n\t\treturn(\n\t\t\t<div onClick={this.handleClick} className={\"menuButton \" + conditionalCSS}></div>\n\t\t);\n\t}\n}\n\nclass TranslationHeaderOptionButton extends Component {\n\tconstructor(props) {\n        super(props);\n        \n        // Bind methods to 'this'\n    \tthis.handleClick = this.handleClick.bind(this);\n  \t}\n    \n    handleClick(evt) {\n\t\tif (window.innerWidth < 720) { // TODO: Is this cross-browser compatible?\n\t\t\tFlux.store.dispatch(Flux.createToggleLanguageSelectionDropdownAction(this.props.sourceOrTarget));\n        }\n        this.props.onClick(this.props.sourceOrTarget, this.props.text);\n\t}\n\n\trender() {\n        const selectCssClass = (this.props.selected ? \"selectedLanguage\" : \"unselectedLanguage\");\n        const conditionalCSSIfItsDetectLanguage = ((this.props.text == Config.detectLanguageHeaderBarHTML) ? \"firstHeaderLanguage\" : \"\")\n\t\treturn(\n            <div onClick={this.handleClick} \n                    className={selectCssClass + \" translationHeader--button \" + conditionalCSSIfItsDetectLanguage}>\n                <h3>{this.props.text}</h3>\n            </div>\n\t\t);\n\t}\n}\n\n/********* Stateless Components ***********/\nconst LanguageListItem = props => { \n\treturn (\n\t    <div className=\"languagelistItemWrapper\" >\n\t\t\t<h5 className={\"languageListItem \" + props.h5conditionalCSS}\n\t\t\t\tonClick={props.onClick}>\n                <b>{props.value.substr(0, props.initialBoldingLength)}</b>{props.value.substr(props.initialBoldingLength, props.value.length)}\n\t\t\t</h5>\n\t\t</div>\n\t);\n}\n\n// Displays the background for the page\nconst Background = props => {\n    return (\n        <div>\n            <div className=\"background-1\"></div>\n            <div className=\"background-2\"></div>\n        </div>\n    );\n}\n\n// Handles the header bar at the top of the app \nconst Header = props => {\n    return (\n        <header className=\"header\">\n        </header>\n    );\n}\n\n// Fadebox is an invisible div that we use to create the allusion of languages \"sliding away\"\n// in the translation header bar\nconst FadeBox = props => {\n    return(\n        <div className=\"fadeBox\"></div>\n    );\n}\n\n// SwitchButton is the button in the middle of the translation header that can be used to switch source and target languages\nconst  SwitchButton = (props) =>  {\n    return(\n        <div className={props.active ? \"switchButtonWrapperActive\" : \"switchButtonWrapperInactive\"} >\n            <div \n                onClick={props.onClick}\n                className={props.active ? 'switchButtonActive' : 'switchButtonInactive'}\n            >\n            </div>\n        </div>\n    );\n}\n// getConditionalCSSForLanguageListItem returns the conditional CSS for a languageListItem. \n// str str str str -> str\n// e.g \"English\" \"Russian\" \"source\" \"English\" -> \"selectCheck\"\n// activeSourceLanguage: any human-readable language among supported languages (see config/languages.js)\n// activeTargetLanguage: any human-readable language among supported languages (see config/languages.js)\n// selectBoxOpen: one of \"source\", \"target\" or \"\"\n// language: any human-readable language among supported languages (see config/languages.js)\nfunction getConditionalCSSForLanguageListItem(activeSourceLanguage, activeTargetLanguage, selectBoxOpen, language) {\n    var conditionalCSS;\n    \n\tswitch (selectBoxOpen) {\n\t\tcase \"source\":\n\t\t\tconditionalCSS = ((activeSourceLanguage === language) ? \"selectCheck\" : \"\");\n\n\t\t\t// Handle the special Detect Languages case\n\t\t\tif ((activeSourceLanguage === Config.detectLanguageHeaderBarHTML) && (language === Config.detectLanguageDropdownMenuHTML)) {\n\t\t\t\tconditionalCSS = \"selectCheck\";\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"target\":\n\t\t\tconditionalCSS = ((activeTargetLanguage === language) ? \"selectCheck\" : \"\");\n\t\t\tbreak;\n\t\tcase \"\":\n\t\t\tconditionalCSS = \"\";\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t// throw error\n\t}\n\n\treturn conditionalCSS;\n}\n\nexport default App;\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}